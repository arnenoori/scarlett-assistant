import { DragStartEvent } from '@dnd-kit/core';
import { ReactFC } from '@formily/reactive-react';
import React from 'react';
export interface ISortableContainerProps {
    list: any[];
    start?: number;
    accessibility?: {
        container?: Element;
    };
    onSortStart?: (event: DragStartEvent) => void;
    onSortEnd?: (event: {
        oldIndex: number;
        newIndex: number;
    }) => void;
}
export declare function SortableContainer<T extends React.HTMLAttributes<HTMLElement>>(Component: ReactFC<T>): ReactFC<ISortableContainerProps & T>;
export declare const useSortableItem: () => Partial<{
    active: import("@dnd-kit/core").Active;
    activeIndex: number;
    attributes: import("@dnd-kit/core").DraggableAttributes;
    data: import("@dnd-kit/sortable").SortableData & {
        [x: string]: any;
    };
    rect: React.MutableRefObject<import("@dnd-kit/core").ClientRect>;
    index: number;
    newIndex: number;
    items: import("@dnd-kit/core").UniqueIdentifier[];
    isOver: boolean;
    isSorting: boolean;
    isDragging: boolean;
    listeners: import("@dnd-kit/core/dist/hooks/utilities").SyntheticListenerMap;
    node: React.MutableRefObject<HTMLElement>;
    overIndex: number;
    over: import("@dnd-kit/core").Over;
    setNodeRef: (node: HTMLElement) => void;
    setActivatorNodeRef: (element: HTMLElement) => void;
    setDroppableNodeRef: (element: HTMLElement) => void;
    setDraggableNodeRef: (element: HTMLElement) => void;
    transform: import("@dnd-kit/utilities").Transform;
    transition: string;
}>;
export declare const SortableItemContext: React.Context<Partial<{
    active: import("@dnd-kit/core").Active;
    activeIndex: number;
    attributes: import("@dnd-kit/core").DraggableAttributes;
    data: import("@dnd-kit/sortable").SortableData & {
        [x: string]: any;
    };
    rect: React.MutableRefObject<import("@dnd-kit/core").ClientRect>;
    index: number;
    newIndex: number;
    items: import("@dnd-kit/core").UniqueIdentifier[];
    isOver: boolean;
    isSorting: boolean;
    isDragging: boolean;
    listeners: import("@dnd-kit/core/dist/hooks/utilities").SyntheticListenerMap;
    node: React.MutableRefObject<HTMLElement>;
    overIndex: number;
    over: import("@dnd-kit/core").Over;
    setNodeRef: (node: HTMLElement) => void;
    setActivatorNodeRef: (element: HTMLElement) => void;
    setDroppableNodeRef: (element: HTMLElement) => void;
    setDraggableNodeRef: (element: HTMLElement) => void;
    transform: import("@dnd-kit/utilities").Transform;
    transition: string;
}>>;
export interface ISortableElementProps {
    index?: number;
    lockAxis?: 'x' | 'y';
}
export declare function SortableElement<T extends React.HTMLAttributes<HTMLElement>>(Component: ReactFC<T>): ReactFC<T & ISortableElementProps>;
export declare function SortableHandle<T extends React.HTMLAttributes<HTMLElement>>(Component: ReactFC<T>): ReactFC<T>;
