import { call, put, select, take, cancel, all, race } from 'redux-saga/effects';
import { Action, ActionCreator, PollActionCreator } from 'dva-model-creator/lib/actionCreatorFactory';
import { History } from 'history';
import { Dispatch } from 'redux';
export * from 'dva-model-creator/lib/actionCreatorFactory';
export interface SubscriptionAPI {
    history: History;
    dispatch: Dispatch<any>;
}
export declare type Subscription = (api: SubscriptionAPI, done: Function) => void;
export interface SubscriptionsMapObject {
    [key: string]: Subscription;
}
export declare type Handler<InS extends OutS, OutS, P> = (state: InS, payload: P) => OutS;
export declare type ImmerHandler<InS, P> = (state: InS, payload: P) => void;
interface Model<T> {
    namespace: string;
    state?: T;
    reducers?: any;
    effects?: any;
    subscriptions?: any;
}
export interface EffectsCommandMap {
    put: typeof put;
    call: typeof call;
    select: typeof select;
    take: typeof take;
    cancel: typeof cancel;
    all: typeof all;
    race: typeof race;
}
export declare type EffectsHandler<P> = (payload: P, effects: EffectsCommandMap) => any;
export declare type EffectsHandlerWithAction<P> = (payload: Action<P>, effects: EffectsCommandMap) => any;
export declare type EffectsWatcher = (effects: EffectsCommandMap) => any;
export declare class DvaModelBuilder<InS extends OutS, OutS = InS> {
    private model;
    constructor(initState: InS, namespace?: string);
    immer: <P>(actionCreator: ActionCreator<P>, handler: ImmerHandler<InS, P>) => this;
    immerWithAction: <P>(actionCreator: ActionCreator<P>, handler: ImmerHandler<InS, Action<P>>) => this;
    case: <P>(actionCreator: ActionCreator<P>, handler: Handler<InS, OutS, P>) => this;
    caseWithAction: <P>(actionCreator: ActionCreator<P>, handler: Handler<InS, OutS, Action<P>>) => this;
    takeEvery: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandler<P>) => this;
    takeEveryWithAction: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandlerWithAction<P>) => this;
    takeLatest: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandler<P>) => this;
    takeLatestWithAction: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandlerWithAction<P>) => this;
    throttle: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandler<P>, ms?: number) => this;
    throttleWithAction: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandlerWithAction<P>, ms?: number) => this;
    watcher: <P>(actionCreator: ActionCreator<P>, handler: EffectsWatcher) => this;
    poll: <P>(pollActionCreator: PollActionCreator<P>, handler: EffectsHandler<P>, delay: number) => this;
    subscript: (func: Subscription) => this;
    build: () => Model<OutS>;
    private setEffects;
    private setEffectsWithPollActionCreator;
    private checkType;
}
