/// <reference types="react" />
import { PromiseReturnType } from '../utils';
export declare type IUseLoadingState<T extends (...args: any[]) => Promise<any>> = {
    loading: boolean;
    params?: Parameters<T>;
};
declare type IUseLoadingOption<T extends (...args: any[]) => Promise<any>> = {
    onSuccess?: (result: PromiseReturnType<T>, params: Parameters<T>) => void;
    onError?: (error: Error, params: Parameters<T>) => void;
};
export default function useLoading<T extends (...args: any[]) => Promise<any>, S extends IUseLoadingState<T>>(fn: T, options?: IUseLoadingOption<T> | ((setState: React.Dispatch<React.SetStateAction<S>>) => IUseLoadingOption<T>), initialState?: Partial<S>): S & {
    setState: import("react").Dispatch<import("react").SetStateAction<S>>;
    run: (...args: Parameters<T>) => void;
    cancel: () => void;
};
export {};
