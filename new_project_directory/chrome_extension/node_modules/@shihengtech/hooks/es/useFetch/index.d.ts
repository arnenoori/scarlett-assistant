import { DependencyList } from 'react';
import { PromiseReturnType } from '../utils';
declare type IUseFetchState<D> = {
    data?: D;
    error?: any;
};
export interface IUseFetchOptions<T extends (...args: any[]) => any> {
    initialState?: IUseFetchState<PromiseReturnType<T>>;
    onSuccess?: (result: PromiseReturnType<T>, params: Parameters<T>) => void | IUseFetchState<PromiseReturnType<T>>;
    onError?: (error: Error, params: Parameters<T>) => void | IUseFetchState<PromiseReturnType<T>>;
    auto?: boolean;
}
export default function useFetch<T extends (...args: any[]) => any>(func: T, deps?: DependencyList, { auto, onError, onSuccess, initialState }?: IUseFetchOptions<T>): {
    setState: import("react").Dispatch<import("react").SetStateAction<IUseFetchState<import("../utils").Unpack<ReturnType<T>>>>>;
    loading: boolean;
    params?: Parameters<T> | undefined;
    data?: import("../utils").Unpack<ReturnType<T>> | undefined;
    error?: any;
    run: (...args: Parameters<T>) => void;
    cancel: () => void;
};
export {};
