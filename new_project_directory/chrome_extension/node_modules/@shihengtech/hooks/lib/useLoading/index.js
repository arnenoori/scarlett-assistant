"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useLoading;

var _react = require("react");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useLoading(fn) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var initialState = arguments.length > 2 ? arguments[2] : undefined;

  var _useState = (0, _react.useState)(_objectSpread({
    loading: false
  }, initialState)),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  var fnsRef = (0, _react.useRef)({
    fn: fn,
    cancel: function cancel() {}
  });
  fnsRef.current = _objectSpread(_objectSpread({}, fnsRef.current), {}, {
    fn: fn
  }, typeof options === 'function' ? options(setState) : options);

  var _useMemo = (0, _react.useMemo)(function () {
    return {
      run: function run() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var abort = false;
        var _fnsRef$current = fnsRef.current,
            fn = _fnsRef$current.fn,
            cancel = _fnsRef$current.cancel,
            onSuccess = _fnsRef$current.onSuccess,
            onError = _fnsRef$current.onError;
        cancel();
        setState(function (s) {
          return _objectSpread(_objectSpread({}, s), {}, {
            loading: true,
            params: args
          });
        });
        fn.apply(void 0, args).then(function (result) {
          if (abort) return;
          onSuccess && onSuccess(result, args);
          setState(function (s) {
            return _objectSpread(_objectSpread({}, s), {}, {
              loading: false
            });
          });
        }).catch(function (error) {
          if (abort) return;
          onError && onError(error, args);
          setState(function (s) {
            return _objectSpread(_objectSpread({}, s), {}, {
              loading: false
            });
          });
        });

        fnsRef.current.cancel = function () {
          return abort = true;
        };
      },
      cancel: function cancel() {
        return fnsRef.current.cancel();
      }
    };
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  []),
      run = _useMemo.run,
      cancel = _useMemo.cancel;

  return _objectSpread(_objectSpread({}, state), {}, {
    setState: setState,
    run: run,
    cancel: cancel
  });
}