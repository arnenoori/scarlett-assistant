"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useFetch;

var _react = require("react");

var _useLoading = _interopRequireDefault(require("../useLoading"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function useFetch(func) {
  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$auto = _ref.auto,
      auto = _ref$auto === void 0 ? true : _ref$auto,
      _onError = _ref.onError,
      _onSuccess = _ref.onSuccess,
      initialState = _ref.initialState;

  var result = (0, _useLoading.default)(func, function (setState) {
    return {
      onSuccess: function onSuccess(data, params) {
        if (_onSuccess) {
          var extra = _onSuccess(data, params);

          setState(function (s) {
            return _objectSpread(_objectSpread({}, s), {}, {
              data: data
            }, extra);
          });
          return;
        }

        setState(function (s) {
          return _objectSpread(_objectSpread({}, s), {}, {
            data: data
          });
        });
      },
      onError: function onError(error, params) {
        if (_onError) {
          var extra = _onError(error, params);

          setState(function (s) {
            return _objectSpread(_objectSpread({}, s), {}, {
              error: error
            }, extra);
          });
          return;
        }

        setState(function (s) {
          return _objectSpread(_objectSpread({}, s), {}, {
            error: error
          });
        });
      }
    };
  }, initialState);
  var setState = (0, _react.useCallback)(function (nextState) {
    return result.setState(function (s) {
      return _objectSpread(_objectSpread({}, s), typeof nextState === 'function' ? nextState(s) : nextState);
    });
  }, []);
  (0, _react.useEffect)(function () {
    if (auto) {
      result.run();
      return result.cancel;
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, deps);
  return _objectSpread(_objectSpread({}, result), {}, {
    setState: setState
  });
}